from multiprocessing import current_process
import sys, os
header = "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n<configuration>\n"
conf_str = "<property>\n  <name>{}</name>\n  <value>{}</value>\n  </property>\n"
tile = "</configuration>\n"
current_param = {}
key_list = []   # Use to index the current checking (key,value) pair
test = ""
target_config_file = "target/classes/core-ctest.xml"

# Parse the input file generated by jqf:repro
# The example format is like following:
# [PARENT-CONFIG-SAME] dummy.fence.key = org.apache.hadoop.ha.DummyHAService$DummyFencer
# [PARENT-CONFIG-SAME] hadoop.tokens -> null
# [PARENT-CONFIG-DIFF] ha.zookeeper.quorum = 127.0.0.1:2221 -> 127.0.0.1:32685
def parse_same_or_new(line):
    splited = line.strip().split(" ")
    key = ""
    value = ""
    if "PARENT-CONFIG-SAME" in line or "PARENT-CONFIG-NEW" in line:
        key = splited[1]
        if len(splited) > 3:
            value = splited[3]
    elif "PARENT-CONFIG-DIFF" in line:
        key = splited[1]
        if len(splited) > 5:
            value = splited[5]
    return key, value


# Initialization phase to put all injected configuration into current_param
def put_all_param_to_dic(input_config_file):
    # If file is empty (parent round failure)
    if not os.path.getsize(input_config_file):
        exit(0)
    with open(input_config_file, 'r') as f_input:
        for line in f_input: 
            if "[TEST]=" in line or "test=" in line:
                global test
                test = line.strip().split("=")[1]
                continue
            key, value = parse_same_or_new(line)
            current_param[key] = value
            key_list.append(key)


# Parse generated configuration from input_config_file
# Put them into target_config_file for debug
def run(input_config_file, output_dir):
    put_all_param_to_dic(input_config_file)
    dict_len = len(current_param)
    if len(key_list) != dict_len:
        print("Length of key list is different from parameter set {} vs {}".format(len(key_list), dict_len))
    else:
        for i in range(dict_len):
            current_key = key_list[i]
            run_and_check(test, current_key)
        write_dict_to_file(test, output_dir, str(input_config_file.split("-")[-1]))


# Run test without current_key injected
# If failure still occurs, remove current_key from current_dic
def run_and_check(test, current_key):
    with open(target_config_file, 'w') as f_target:
        f_target.write(header)
        for k, v in current_param.items():
            # Do not add current key into configuration file
            if k == current_key:
                continue
            f_target.write(conf_str.format(k, v))
        f_target.write(tile)
    mvn_cmd = "JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\" mvn surefire:test -Dtest={} | tee result4check".format(test)
    os.system(mvn_cmd)
    check_result("result4check", current_key)
    

# Delete parameter key-value pair if failure/error still occurs
def check_result(check_file, current_key):
    with open(check_file, 'r') as f:
        content = f.read()
        # The failure/error still occurs without current_key, so remove it
        if "<<< FAILURE!" in content or "<<< ERROR!" in content:
            del current_param[current_key]


def write_dict_to_file(test, output_dir, failure_id):
    output_file = os.path.join(output_dir, "{}-failure_{}".format(test, failure_id))
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    with open(output_file, 'w') as f:
        for k, v in current_param.items():
            f.write("{} = {}\n".format(k, v))


def maven_clean_install():
    os.system("JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\" mvn clean install -DskipTests")


if __name__ == '__main__':
    input_config_file = sys.argv[1]
    output_dir = sys.argv[2]
    #maven_clean_install()
    run(input_config_file, output_dir)
